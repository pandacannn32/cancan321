"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const steam_connector_1 = require("./steam-connector");
const steam_parser_1 = require("./steam-parser");
/**
 * Class in charge of providing public methods
 */
class SteamProvider {
    constructor() {
        this.steamConnector = new steam_connector_1.SteamConnector();
    }
    /**
       * Search through the Steam searching website. Results are limited to 10 for now.
       * @param gameName Name to search
       * @param language Language for the results (English by default)
       * @param currency Currency for the results (USD by default)
       */
    search(gameName, elementNumber = 10, language = 'english', currency = 'us', pageNumber = 1) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = new Array();
            while (elementNumber > 25) {
                let searchPage = yield this.steamConnector.search(gameName, pageNumber++, language, currency);
                result = result.concat(steam_parser_1.SteamParser.parseSearch(searchPage, elementNumber));
                elementNumber -= 25;
            }
            if (elementNumber > 0) {
                let searchPage = yield this.steamConnector.search(gameName, pageNumber, language, currency);
                result = result.concat(steam_parser_1.SteamParser.parseSearch(searchPage, elementNumber));
            }
            return result;
        });
    }
    /**
       *
       * @param appId Steam AppId to retrieve it's detailts
       * @param language Language for the results (English by default)
       * @param currency Currency for the results (USD by default)
       */
    detail(appId, language = 'english', currency = 'us') {
        return __awaiter(this, void 0, void 0, function* () {
            let detailRawData = yield this.steamConnector.detail(appId, language, currency);
            let entry = steam_parser_1.SteamParser.parseDetails(detailRawData, appId);
            return entry;
        });
    }
}
exports.SteamProvider = SteamProvider;
//# sourceMappingURL=steam-provider.js.map