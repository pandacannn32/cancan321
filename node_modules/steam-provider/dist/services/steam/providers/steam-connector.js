"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const https = require("https");
const querystring = require("querystring");
const connector_1 = require("../../shared/connector");
/**
 * Parameters for the detail request
 */
const detailHttpRequestOptions = {
    hostname: "store.steampowered.com",
    port: 443,
    method: "GET",
    path: "/api/appdetails?",
    headers: {
        "Content-Type": "application/json; charset=utf-8",
        accept: "*/*"
    }
};
/**
 * Parameters for the search request
 */
const searchHttpRequestOptions = {
    hostname: "store.steampowered.com",
    port: 443,
    method: "GET",
    path: "/search/?",
    headers: {
        "Content-Type": "text/html; charset=UTF-8",
        accept: "*/*"
    }
};
/**
 * Class in charge of doing the net requests
 */
class SteamConnector {
    constructor() {
        this.requestOptions = new connector_1.HttpRequestOptions();
    }
    /**
     * Write the data chunks into a single string
     * @param res HTTPS response
     * @param resolve Function to finish
     */
    static writeDataChunk(res, resolve) {
        return __awaiter(this, void 0, void 0, function* () {
            if (res.statusCode == 200) {
                res.setEncoding("utf8");
                let rawData = "";
                res.on("data", chunk => {
                    rawData += chunk;
                });
                res.on("end", () => {
                    try {
                        resolve(rawData);
                    }
                    catch (e) {
                        console.error(e.message);
                    }
                });
            }
        });
    }
    /**
     * Set the request options and do the connection for details
     * @param id App ID of the target
     * @param language Language for the results
     * @param currency Currency for the results
     */
    detail(id, language, currency) {
        return __awaiter(this, void 0, void 0, function* () {
            this.requestOptions.setOptions(detailHttpRequestOptions);
            this.requestOptions.$path = querystring.stringify({
                appids: id,
                l: language,
                cc: currency
            });
            let result = new Promise((resolve, reject) => {
                https.get(this.requestOptions.getOptionsObject(), res => {
                    SteamConnector.writeDataChunk(res, resolve);
                });
            });
            return result;
        });
    }
    /**
     * Set the request options and do the connection for search
     * @param gameName Game name to do the search
     * @param language Language for the results
     * @param currency Currency for the results
     */
    search(gameName, pageNumber, language, currency) {
        return __awaiter(this, void 0, void 0, function* () {
            this.requestOptions.setOptions(searchHttpRequestOptions);
            this.requestOptions.$path = querystring.stringify({
                term: gameName,
                page: pageNumber,
                l: language,
                cc: currency
            });
            let result = new Promise((resolve, reject) => {
                https.get(this.requestOptions.getOptionsObject(), res => {
                    SteamConnector.writeDataChunk(res, resolve);
                });
            });
            return result;
        });
    }
}
exports.SteamConnector = SteamConnector;
//# sourceMappingURL=steam-connector.js.map